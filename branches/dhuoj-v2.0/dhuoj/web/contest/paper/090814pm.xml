<?xml version="1.0" encoding="gb2312"?>
<PaperSetter checked="false">
    <PaperDetail xml:space="preserve"><PaperVersion>1</PaperVersion><PaperID>1</PaperID><PaperName>1</PaperName><PaperAuthor>1</PaperAuthor><PaperTotalTime unit="hour">1</PaperTotalTime><PaperStartTime zone="+8">1</PaperStartTime><PaperProblemSum>6</PaperProblemSum><PublicKey>MIHxMIGoBgcqhkjOOAQBMIGcAkEA/KaCzo4Syrom78z3EQ5SbbB4sF7ey80etKII864WF64B81uRpH5t9jQTxeEu0ImbzRMqzVDZkVG9xD7nN1kuFwIVAJYu3cw2nLqOuyYO5rahJtk0bjjFAkBnhHGyepz0TukaScUUfbGpqvJE8FpDTWSGkx0tFCcbnjUDC3H9c9oXkGmzLik1Yw4cIGI1TQ2iCmxBblC+eUykA0QAAkEA8ojKBedYrFoDBvrk2cvh998qmKFuHB0gXegkDXzHhk+yUprBGbpdLHVDWq8P7hPLyNPuviEvJoxz4x5kqiidgQ==</PublicKey><Signature>MCwCFCJGB3i9qocMP5roR5dcwtGdpHV2AhRd43L2y/eMFHNn29XRHa8qsr2O4Q==</Signature><PaperReference><![CDATA[1]]></PaperReference><PaperDescribe><![CDATA[1]]></PaperDescribe></PaperDetail>
    <ProblemList encrypted="0">
        <ProblemArchive version="1.0" checked="false">
            <Title>A Dividing</Title>
            <Author>dhu</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">Language:&lt;select size="1" onchange="window.location.href='problem?id=1014&amp;amp;lang='+this.value+'&amp;amp;change=true'"&gt;&lt;option value="default" selected="selected"&gt;Default&lt;/option&gt;&lt;/select&gt;&lt;/div&gt;&lt;div class="ptt" lang="en-US"&gt;Dividing&lt;/div&gt;
&lt;div class="plm"&gt;&lt;table align="center"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;Time Limit:&lt;/b&gt; 1000MS&lt;/td&gt;&lt;td width="10"&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Memory Limit:&lt;/b&gt; 10000K&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;Total Submissions:&lt;/b&gt; 24184&lt;/td&gt;&lt;td width="10"&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Accepted:&lt;/b&gt; 5846&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p class="pst"&gt;Description&lt;/p&gt;&lt;div class="ptx" lang="en-US"&gt;Marsha
and Bill own a collection of marbles. They want to split the collection
among themselves so that both receive an equal share of the marbles.
This would be easy if all the marbles had the same value, because then
they could just split the collection in half. But unfortunately, some
of the marbles are larger, or more beautiful than others. So, Marsha
and Bill start by assigning a value, a natural number between one and
six, to each marble. Now they want to divide the marbles so that each
of them gets the same total value. Unfortunately, they realize that it
might be impossible to divide the marbles in this way (even if the
total value of all marbles is even). For example, if there are one
marble of value 1, one of value 3 and two of value 4, then they cannot
be split into sets of equal value. So, they ask you to write a program
that checks whether there is a fair partition of the marbles. &lt;/div&gt;&lt;p class="pst"&gt;Input&lt;/p&gt;&lt;div class="ptx" lang="en-US"&gt;Each
line in the input file describes one collection of marbles to be
divided. The lines contain six non-negative integers n1 , . . . , n6 ,
where ni is the number of marbles of value i. So, the example from
above would be described by the input-line "1 0 1 2 0 0". The maximum
total number of marbles will be 20000. &lt;br&gt;The last line of the input file will be "0 0 0 0 0 0"; do not process this line. &lt;/div&gt;&lt;p class="pst"&gt;Output&lt;/p&gt;&lt;div class="ptx" lang="en-US"&gt;For
each collection, output "Collection #k:", where k is the number of the
test case, and then either "Can be divided." or "Can't be divided.". &lt;br&gt;Output a blank line after each test case. &lt;/div&gt;&lt;p class="pst"&gt;Sample Input&lt;/p&gt;&lt;pre class="sio"&gt;1 0 1 2 0 0 
1 0 0 0 1 1 
0 0 0 0 0 0 &lt;/pre&gt;&lt;p class="pst"&gt;Sample Output&lt;/p&gt;&lt;pre class="sio"&gt;Collection #1:
Can't be divided.

Collection #2:
Can be divided.&lt;/pre&gt;&lt;p class="pst"&gt;Source&lt;/p&gt;&lt;div class="ptx" lang="en-US"&gt;&lt;a href="http://acm.pku.edu.cn/JudgeOnline/searchproblem?field=source&amp;amp;key=Mid-Central+European+Regional+Contest+1999"&gt;Mid-Central European Regional Contest 1999&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;font size="3" color="#333399"&gt;&lt;/font&gt;&lt;p align="center"&gt;
&lt;font size="3" color="#333399"&gt;[&lt;a href="http://acm.pku.edu.cn/JudgeOnline/submit?problem_id=1014"&gt;Submit&lt;/a&gt;]&amp;nbsp;&amp;nbsp;
 [&lt;a href="javascript:history.go(-1)"&gt;Go Back&lt;/a&gt;]&amp;nbsp;&amp;nbsp; [&lt;a href="http://acm.pku.edu.cn/JudgeOnline/problemstatus?problem_id=1014"&gt;Status&lt;/a&gt;]&amp;nbsp;&amp;nbsp; 
[&lt;a href="http://acm.pku.edu.cn/JudgeOnline/bbs?problem_id=1014"&gt;Discuss&lt;/a&gt;]
&lt;/font&gt;&lt;/p&gt;</Description>
                <InputSpec xml:space="preserve" />
                <OutputSpec xml:space="preserve" />
            </Problem>
            <TestData>
        <TimeLimit>1</TimeLimit>
        <InputFile />
        <OutputFile />
        <InputFormat inputType="eof">
            <Terminator xml:space="preserve"></Terminator>
            <Seperator xml:space="preserve" layout="bottom"></Seperator>
        </InputFormat>
        <OutputFormat>
            <Header xml:space="preserve"></Header>
            <Footer xml:space="preserve"></Footer>
            <Seperator xml:space="preserve" layout="bottom"></Seperator>
        </OutputFormat>
        <TestCase difficulty="sample">
            <TestInput xml:space="preserve">0
</TestInput>
            <TestOutput xml:space="preserve">0
</TestOutput>
        </TestCase>
    </TestData>
            <Solution xml:space="preserve" language="cpp" filename="" />
        </ProblemArchive>
        <ProblemArchive version="1.0" checked="false">
            <Title>B Building for UN</Title>
            <Author>dhu</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">Language:&lt;select size="1" onchange="window.location.href='problem?id=3566&amp;amp;lang='+this.value+'&amp;amp;change=true'"&gt;&lt;option value="default" selected="selected"&gt;Default&lt;/option&gt;&lt;/select&gt;&lt;/div&gt;&lt;div class="ptt" lang="en-US"&gt;Building for UN&lt;/div&gt;
&lt;div class="plm"&gt;&lt;table align="center"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;Time Limit:&lt;/b&gt; 5000MS&lt;/td&gt;&lt;td width="10"&gt;&lt;/td&gt;&lt;td colspan="3"&gt;&lt;b&gt;Memory Limit:&lt;/b&gt; 65536K&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;Total Submissions:&lt;/b&gt; 840&lt;/td&gt;&lt;td width="10"&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Accepted:&lt;/b&gt; 336&lt;/td&gt;&lt;td width="10"&gt;&lt;/td&gt;&lt;td style="font-weight: bold; color: red;"&gt;Special Judge&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p class="pst"&gt;Description&lt;/p&gt;&lt;div class="ptx" lang="en-US"&gt;&lt;p&gt;The
United Nations has decided to build a new headquarters in Saint
Petersburg, Russia. It will have a form of a rectangular parallelepiped
and will consist of several rectangular floors, one on top of another.
Each floor is a rectangular grid of the same dimensions, each cell of
this grid is an office.&lt;/p&gt;&lt;p&gt;Two offices are considered adjacent if
they are located on the same floor and share a common wall, or if one¡¯s
floor is the other¡¯s ceiling.&lt;/p&gt;&lt;p&gt;The St. Petersburg building will host &lt;i&gt;n&lt;/i&gt; national missions. Each country gets several offices that form a connected set.&lt;/p&gt;&lt;p&gt;Moreover,
modern political situation shows that countries might want to form
secret coalitions. For that to be possible, each pair of countries must
have at least one pair of adjacent offices, so that they can raise the
wall or the ceiling they share to perform secret pair-wise negotiations
just in case they need to.&lt;/p&gt;&lt;p&gt;You are hired to design an appropriate building for the UN.&lt;/p&gt;&lt;/div&gt;&lt;p class="pst"&gt;Input&lt;/p&gt;&lt;div class="ptx" lang="en-US"&gt;&lt;p&gt;The input file consists of a single integer number &lt;i&gt;n&lt;/i&gt; (1 ¡Ü &lt;i&gt;n&lt;/i&gt; ¡Ü 50) ¨D the number of countries that are hosted in the building.&lt;/p&gt;&lt;/div&gt;&lt;p class="pst"&gt;Output&lt;/p&gt;&lt;div class="ptx" lang="en-US"&gt;&lt;p&gt;On the first line of the output file write three integer numbers &lt;i&gt;h&lt;/i&gt;, &lt;i&gt;w&lt;/i&gt;, and &lt;i&gt;l&lt;/i&gt; ¨D height, width and length of the building respectively.&lt;/p&gt;&lt;p&gt;&lt;i&gt;h&lt;/i&gt; descriptions of floors should follow. Each floor description consists of &lt;i&gt;l&lt;/i&gt; lines with &lt;i&gt;w&lt;/i&gt; characters on each line. Separate descriptions of adjacent floors with an empty line.&lt;/p&gt;&lt;p&gt;Use capital and small Latin letters to denote offices of different countries. There should be at most &lt;nobr&gt;1 000 000&lt;/nobr&gt; offices in the building. Each office should be occupied by a country. There should be exactly &lt;i&gt;n&lt;/i&gt; different countries in the building. In this problem the required building design always exists.&lt;/p&gt;&lt;/div&gt;&lt;p class="pst"&gt;Sample Input&lt;/p&gt;&lt;pre class="sio"&gt;4&lt;/pre&gt;&lt;p class="pst"&gt;Sample Output&lt;/p&gt;&lt;pre class="sio"&gt;2 2 2
AB
CC

zz
zz&lt;/pre&gt;&lt;p class="pst"&gt;Source&lt;/p&gt;&lt;div class="ptx" lang="en-US"&gt;&lt;a href="http://acm.pku.edu.cn/JudgeOnline/searchproblem?field=source&amp;amp;key=Northeastern+Europe+2007"&gt;Northeastern Europe 2007&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;font size="3" color="#333399"&gt;&lt;/font&gt;&lt;p align="center"&gt;
&lt;font size="3" color="#333399"&gt;[&lt;a href="http://acm.pku.edu.cn/JudgeOnline/submit?problem_id=3566"&gt;Submit&lt;/a&gt;]&amp;nbsp;&amp;nbsp;
 [&lt;a href="javascript:history.go(-1)"&gt;Go Back&lt;/a&gt;]&amp;nbsp;&amp;nbsp; [&lt;a href="http://acm.pku.edu.cn/JudgeOnline/problemstatus?problem_id=3566"&gt;Status&lt;/a&gt;]&amp;nbsp;&amp;nbsp; 
[&lt;a href="http://acm.pku.edu.cn/JudgeOnline/bbs?problem_id=3566"&gt;Discuss&lt;/a&gt;]</Description>
                <InputSpec xml:space="preserve" />
                <OutputSpec xml:space="preserve" />
            </Problem>
            <TestData>
        <TimeLimit>5</TimeLimit>
        <InputFile />
        <OutputFile />
        <InputFormat inputType="eof">
            <Terminator xml:space="preserve"></Terminator>
            <Seperator xml:space="preserve" layout="bottom"></Seperator>
        </InputFormat>
        <OutputFormat>
            <Header xml:space="preserve"></Header>
            <Footer xml:space="preserve"></Footer>
            <Seperator xml:space="preserve" layout="bottom"></Seperator>
        </OutputFormat>
        <TestCase difficulty="sample">
            <TestInput xml:space="preserve">0
</TestInput>
            <TestOutput xml:space="preserve">0
</TestOutput>
        </TestCase>
    </TestData>
            <Solution xml:space="preserve" language="cpp" filename="" />
        </ProblemArchive>
        <ProblemArchive version="1.0" checked="false">
            <Title>C Robot Motion</Title>
            <Author>dhu</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">Language:&lt;select size="1" onchange="window.location.href='problem?id=1573&amp;amp;lang='+this.value+'&amp;amp;change=true'"&gt;&lt;option value="default" selected="selected"&gt;Default&lt;/option&gt;&lt;/select&gt;&lt;/div&gt;&lt;div class="ptt" lang="en-US"&gt;Robot Motion&lt;/div&gt;
&lt;div class="plm"&gt;&lt;table align="center"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;Time Limit:&lt;/b&gt; 1000MS&lt;/td&gt;&lt;td width="10"&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Memory Limit:&lt;/b&gt; 10000K&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;Total Submissions:&lt;/b&gt; 3801&lt;/td&gt;&lt;td width="10"&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Accepted:&lt;/b&gt; 1837&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p class="pst"&gt;Description&lt;/p&gt;&lt;div class="ptx" lang="en-US"&gt;
&lt;center&gt;&lt;IMG SRC="1573_1.jpg.gif"&gt;&lt;/center&gt;
&lt;br&gt;A robot has been programmed to follow the instructions in its path.
Instructions for the next direction the robot is to move are laid down
in a grid. The possible instructions are &lt;br&gt;
&lt;br&gt;N north (up the page)
&lt;br&gt;S south (down the page)
&lt;br&gt;E east (to the right on the page)
&lt;br&gt;W west (to the left on the page)
&lt;br&gt;
&lt;br&gt;For example, suppose the robot starts on the north (top) side of
Grid 1 and starts south (down). The path the robot follows is shown.
The robot goes through 10 instructions in the grid before leaving the
grid.
&lt;br&gt;
&lt;br&gt;Compare what happens in Grid 2: the robot goes through 3
instructions only once, and then starts a loop through 8 instructions,
and never exits.
&lt;br&gt;
&lt;br&gt;You are to write a program that determines how long it takes a robot to get out of the grid or how the robot loops around.
&lt;br&gt;&lt;/div&gt;&lt;p class="pst"&gt;Input&lt;/p&gt;&lt;div class="ptx" lang="en-US"&gt;There
will be one or more grids for robots to navigate. The data for each is
in the following form. On the first line are three integers separated
by blanks: the number of rows in the grid, the number of columns in the
grid, and the number of the column in which the robot enters from the
north. The possible entry columns are numbered starting with one at the
left. Then come the rows of the direction instructions. Each grid will
have at least one and at most 10 rows and columns of instructions. The
lines of instructions contain only the characters N, S, E, or W with no
blanks. The end of input is indicated by a row containing 0 0 0.&lt;/div&gt;&lt;p class="pst"&gt;Output&lt;/p&gt;&lt;div class="ptx" lang="en-US"&gt;For
each grid in the input there is one line of output. Either the robot
follows a certain number of instructions and exits the grid on any one
the four sides or else the robot follows the instructions on a certain
number of locations once, and then the instructions on some number of
locations repeatedly. The sample input below corresponds to the two
grids above and illustrates the two forms of output. The word "step" is
always immediately followed by "(s)" whether or not the number before
it is 1.&lt;/div&gt;&lt;p class="pst"&gt;Sample Input&lt;/p&gt;&lt;pre class="sio"&gt;3 6 5
NEESWE
WWWESS
SNWWWW
4 5 1
SESWE
EESNW
NWEEN
EWSEN
0 0 0&lt;/pre&gt;&lt;p class="pst"&gt;Sample Output&lt;/p&gt;&lt;pre class="sio"&gt;10 step(s) to exit
3 step(s) before a loop of 8 step(s)
&lt;/pre&gt;&lt;p class="pst"&gt;Source&lt;/p&gt;&lt;div class="ptx" lang="en-US"&gt;&lt;a href="http://acm.pku.edu.cn/JudgeOnline/searchproblem?field=source&amp;amp;key=Mid-Central+USA+1999"&gt;Mid-Central USA 1999&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;font size="3" color="#333399"&gt;&lt;/font&gt;&lt;p align="center"&gt;
&lt;font size="3" color="#333399"&gt;[&lt;a href="http://acm.pku.edu.cn/JudgeOnline/submit?problem_id=1573"&gt;Submit&lt;/a&gt;]&amp;nbsp;&amp;nbsp;
 [&lt;a href="javascript:history.go(-1)"&gt;Go Back&lt;/a&gt;]&amp;nbsp;&amp;nbsp; [&lt;a href="http://acm.pku.edu.cn/JudgeOnline/problemstatus?problem_id=1573"&gt;Status&lt;/a&gt;]&amp;nbsp;&amp;nbsp; 
[&lt;a href="http://acm.pku.edu.cn/JudgeOnline/bbs?problem_id=1573"&gt;Discuss&lt;/a&gt;]
&lt;/font&gt;&lt;/p&gt;</Description>
                <InputSpec xml:space="preserve" />
                <OutputSpec xml:space="preserve" />
                <Figure filename="1573_1.jpg.gif">
                    <Text />
                    <Image xml:space="preserve">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</Image>
                </Figure>
            </Problem>
            <TestData>
        <TimeLimit>1</TimeLimit>
        <InputFile />
        <OutputFile />
        <InputFormat inputType="eof">
            <Terminator xml:space="preserve"></Terminator>
            <Seperator xml:space="preserve" layout="bottom"></Seperator>
        </InputFormat>
        <OutputFormat>
            <Header xml:space="preserve"></Header>
            <Footer xml:space="preserve"></Footer>
            <Seperator xml:space="preserve" layout="bottom"></Seperator>
        </OutputFormat>
        <TestCase difficulty="sample">
            <TestInput xml:space="preserve">0
</TestInput>
            <TestOutput xml:space="preserve">0
</TestOutput>
        </TestCase>
    </TestData>
            <Solution xml:space="preserve" language="cpp" filename="" />
        </ProblemArchive>
        <ProblemArchive version="1.0" checked="false">
            <Title>D</Title>
            <Author />
            <Problem contentType="html">
                <Description xml:space="preserve">&lt;B&gt;History Grading&lt;/B&gt;&lt;BR&gt;&lt;BR&gt;

Background&lt;BR&gt;&lt;BR&gt;

Many problems in Computer Science involve maximizing some measure according to constraints.&lt;BR&gt;&lt;BR&gt;

Consider a history exam in which students are asked to put several historical events into chronological order. Students who order all the events correctly will receive full credit, but how should partial credit be awarded to students who incorrectly rank one or more of the historical events?&lt;BR&gt;&lt;BR&gt;

Some possibilities for partial credit include:&lt;BR&gt;&lt;BR&gt;

   1. 1 point for each event whose rank matches its correct rank&lt;BR&gt;
   2. 1 point for each event in the longest (not necessarily contiguous) sequence of events which are in the correct order relative to each other. &lt;BR&gt;&lt;BR&gt;

For example, if four events are correctly ordered 1 2 3 4 then the order 1 3 2 4 would receive a score of 2 using the first method (events 1 and 4 are correctly ranked) and a score of 3 using the second method (event sequences 1 2 4 and 1 3 4 are both in the correct order relative to each other).&lt;BR&gt;&lt;BR&gt;

In this problem you are asked to write a program to score such questions using the second method.&lt;BR&gt;&lt;BR&gt;

The Problem&lt;BR&gt;&lt;BR&gt;

Given the correct chronological order of n events 1,2,...,n as c1,c2,...,cn where 1&amp;lt;=ci&amp;lt;=n denotes the ranking of event i in the correct chronological order and a sequence of student responses r1,r2,...,rn where 1&amp;lt;=ri&amp;lt;=n denotes the chronological rank given by the student to event i; determine the length of the longest (not necessarily contiguous) sequence of events in the student responses that are in the corre&lt;ct chronological order relative to each other. &lt;BR&gt;&lt;BR&gt;

The Input&lt;BR&gt;&lt;BR&gt;

The first line of the input will consist of one integer n indicating the number of events with 2&amp;lt;=n&amp;lt;=20 . The second line will contain n integers, indicating the correct chronological order of n events. The remaining lines will each consist of n integers with each line representing a student's chronological ordering of the n events. All lines will contain n numbers in the range [1...n] , with each number appearing exactly once per line, and with each number separated from other numbers on the same line by one or more spaces.&lt;BR&gt;&lt;BR&gt;

The Output&lt;BR&gt;&lt;BR&gt;

For each student ranking of events your program should print the score for that ranking. There should be one line of output for each student ranking.&lt;BR&gt;&lt;BR&gt;
&lt;PRE&gt;
Sample Input 1

4
4 2 3 1
1 3 2 4
3 2 1 4
2 3 4 1

Sample Output 1

1
2
3

Sample Input 2

10
3 1 2 4 9 5 10 6 8 7
1 2 3 4 5 6 7 8 9 10
4 7 2 3 10 6 9 1 5 8
3 1 2 4 9 5 10 6 8 7
2 10 1 3 8 4 9 5 7 6

Sample Output 2

6
5
10
9
&lt;/PRE&gt;</Description>
                <InputSpec xml:space="preserve" />
                <OutputSpec xml:space="preserve" />
            </Problem>
            <TestData>
        <TimeLimit>3</TimeLimit>
        <InputFile />
        <OutputFile />
        <InputFormat inputType="eof">
            <Terminator xml:space="preserve"></Terminator>
            <Seperator xml:space="preserve" layout="bottom"></Seperator>
        </InputFormat>
        <OutputFormat>
            <Header xml:space="preserve"></Header>
            <Footer xml:space="preserve"></Footer>
            <Seperator xml:space="preserve" layout="bottom"></Seperator>
        </OutputFormat>
        <TestCase difficulty="sample">
            <TestInput xml:space="preserve">0
</TestInput>
            <TestOutput xml:space="preserve">0
</TestOutput>
        </TestCase>
    </TestData>
            <Solution xml:space="preserve" language="cpp" filename="" />
        </ProblemArchive>
        <ProblemArchive version="1.0" checked="false">
            <Title>E Queens in peachful positions</Title>
            <Author>dhu</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">Language:&lt;select size="1" onchange="window.location.href='problem?id=2358&amp;amp;lang='+this.value+'&amp;amp;change=true'"&gt;&lt;option value="default" selected="selected"&gt;Default&lt;/option&gt;&lt;/select&gt;&lt;/div&gt;&lt;div class="ptt" lang="en-US"&gt;Queens in peaceful positions&lt;/div&gt;
&lt;div class="plm"&gt;&lt;table align="center"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;Time Limit:&lt;/b&gt; 1000MS&lt;/td&gt;&lt;td width="10"&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Memory Limit:&lt;/b&gt; 65536K&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;Total Submissions:&lt;/b&gt; 1017&lt;/td&gt;&lt;td width="10"&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Accepted:&lt;/b&gt; 490&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p class="pst"&gt;Description&lt;/p&gt;&lt;div class="ptx" lang="en-US"&gt;On
a chessboard of size NxN (N&amp;lt;=50) N queens are placed. We'll say that
queens are in peaceful position if none of them can attack another. You
are to find the total amount of peaceful positions that can be obtained
from the given peaceful position by rearranging of exactly three queens.&lt;/div&gt;&lt;p class="pst"&gt;Input&lt;/p&gt;&lt;div class="ptx" lang="en-US"&gt;The
first line of input will contain an integer number N that represents
the size of a chessboard (and the number of queens also). It will be
followed by N lines describing positions of queens. Each line will
contain two integers X and Y separated by a space. These numbers
represent horizontal and vertical coordinates and lay in a range from 1
to N.&lt;/div&gt;&lt;p class="pst"&gt;Output&lt;/p&gt;&lt;div class="ptx" lang="en-US"&gt;The
output consists of a single integer representing the number of peaceful
positions that can be achieved from initial position by moving of
exactly three queens. Note: queens are not numbered so if you rearrange
them on the chessboard using only squares they already occupied you'll
always get the same peaceful position, not the new one.&lt;/div&gt;&lt;p class="pst"&gt;Sample Input&lt;/p&gt;&lt;pre class="sio"&gt;4
2 1
1 3
3 4
4 2
&lt;/pre&gt;&lt;p class="pst"&gt;Sample Output&lt;/p&gt;&lt;pre class="sio"&gt;0
&lt;/pre&gt;&lt;p class="pst"&gt;Source&lt;/p&gt;&lt;div class="ptx" lang="en-US"&gt;&lt;a href="http://acm.pku.edu.cn/JudgeOnline/searchproblem?field=source&amp;amp;key=Ural+Collegiate+Programming+Contest+1999"&gt;Ural Collegiate Programming Contest 1999&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;font size="3" color="#333399"&gt;&lt;/font&gt;&lt;p align="center"&gt;
&lt;font size="3" color="#333399"&gt;[&lt;a href="http://acm.pku.edu.cn/JudgeOnline/submit?problem_id=2358"&gt;Submit&lt;/a&gt;]&amp;nbsp;&amp;nbsp;
 [&lt;a href="javascript:history.go(-1)"&gt;Go Back&lt;/a&gt;]&amp;nbsp;&amp;nbsp; [&lt;a href="http://acm.pku.edu.cn/JudgeOnline/problemstatus?problem_id=2358"&gt;Status&lt;/a&gt;]&amp;nbsp;&amp;nbsp; 
[&lt;a href="http://acm.pku.edu.cn/JudgeOnline/bbs?problem_id=2358"&gt;Discuss&lt;/a&gt;]</Description>
                <InputSpec xml:space="preserve" />
                <OutputSpec xml:space="preserve" />
            </Problem>
            <TestData>
        <TimeLimit>1</TimeLimit>
        <InputFile />
        <OutputFile />
        <InputFormat inputType="eof">
            <Terminator xml:space="preserve"></Terminator>
            <Seperator xml:space="preserve" layout="bottom"></Seperator>
        </InputFormat>
        <OutputFormat>
            <Header xml:space="preserve"></Header>
            <Footer xml:space="preserve"></Footer>
            <Seperator xml:space="preserve" layout="bottom"></Seperator>
        </OutputFormat>
        <TestCase difficulty="sample">
            <TestInput xml:space="preserve">0
</TestInput>
            <TestOutput xml:space="preserve">0
</TestOutput>
        </TestCase>
    </TestData>
            <Solution xml:space="preserve" language="cpp" filename="" />
        </ProblemArchive>
        <ProblemArchive version="1.0" checked="false">
            <Title>F Space Station Shielding</Title>
            <Author>dhu</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">Language:&lt;select size="1" onchange="window.location.href='problem?id=1096&amp;amp;lang='+this.value+'&amp;amp;change=true'"&gt;&lt;option value="default" selected="selected"&gt;Default&lt;/option&gt;&lt;/select&gt;&lt;/div&gt;&lt;div class="ptt" lang="en-US"&gt;Space Station Shielding&lt;/div&gt;
&lt;div class="plm"&gt;&lt;table align="center"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;Time Limit:&lt;/b&gt; 1000MS&lt;/td&gt;&lt;td width="10"&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Memory Limit:&lt;/b&gt; 65536K&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;Total Submissions:&lt;/b&gt; 565&lt;/td&gt;&lt;td width="10"&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Accepted:&lt;/b&gt; 210&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p class="pst"&gt;Description&lt;/p&gt;&lt;div class="ptx" lang="en-US"&gt;Roger
Wilco is in charge of the design of a low orbiting space station for
the planet Mars. To simplify construction, the station is made up of a
series of Airtight Cubical Modules (ACM's), which are connected
together once in space. One problem that concerns Roger is that of
(potentially) lethal bacteria that may reside in the upper atmosphere
of Mars. Since the station will occasionally fly through the upper
atmosphere, it is imperative that extra shielding be used on all faces
of the ACM's touch, either edge to edge or face to face, that joint is
sealed so no bacteria can sneak through. Any face of an ACM shared by
another ACM will not need shielding, of course, nor will a face which
cannot be reached from the outside. Roger could just put extra
shielding on all of the faces of every ACM, but the cost would be
prohibitive. Therefore, he wants to know the exact number of ACM faces
which need the extra shielding. &lt;br&gt;&lt;/div&gt;&lt;p class="pst"&gt;Input&lt;/p&gt;&lt;div class="ptx" lang="en-US"&gt;Input
consists of multiple problem instances. Each instance consists of a
specification of a space station. We assume that each space station can
fit into an n x m x k grid (1 &amp;lt;= n, m, k &amp;lt;= 60), where each grid
cube may or may not contain an ACM. We number the grid cubes 0, 1, 2, ?
kmn-1 as shown in the diagram below. Each space station specification
then consists of the following: the first line contains four positive
integers n m k l, where n, m and k are as described above and l is the
number of ACM's in the station. This is followed by a set of lines
which specify the l grid locations of the ACM's. Each of these lines
contain 10 integers (except possibly the last). Each space station is
fully connected (i.e., an astronaut can move from one ACM to any other
ACM in the station without leaving the station). Values of n = m = k =
l = 0 terminate input.
&lt;br&gt;&lt;center&gt;&lt;IMG SRC="1096_1.gif"&gt;&lt;/center&gt;&lt;/div&gt;&lt;p class="pst"&gt;Output&lt;/p&gt;&lt;div class="ptx" lang="en-US"&gt;For each problem instance, you should output one line of the form
&lt;br&gt;
&lt;br&gt;The number of faces needing shielding is s.&lt;/div&gt;&lt;p class="pst"&gt;Sample Input&lt;/p&gt;&lt;pre class="sio"&gt;2 2 1 3
0 1 3
3 3 3 26
0 1 2 3 4 5 6 7 8 9
10 11 12 14 15 16 17 18 19 20
21 22 23 24 25 26
0 0 0 0&lt;/pre&gt;&lt;p class="pst"&gt;Sample Output&lt;/p&gt;&lt;pre class="sio"&gt;The number of faces needing shielding is 14.
The number of faces needing shielding is 54.&lt;/pre&gt;&lt;p class="pst"&gt;Source&lt;/p&gt;&lt;div class="ptx" lang="en-US"&gt;&lt;a href="http://acm.pku.edu.cn/JudgeOnline/searchproblem?field=source&amp;amp;key=East+Central+North+America+2001"&gt;East Central North America 2001&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;font size="3" color="#333399"&gt;&lt;/font&gt;&lt;p align="center"&gt;
&lt;font size="3" color="#333399"&gt;[&lt;a href="http://acm.pku.edu.cn/JudgeOnline/submit?problem_id=1096"&gt;Submit&lt;/a&gt;]&amp;nbsp;&amp;nbsp;
 [&lt;a href="javascript:history.go(-1)"&gt;Go Back&lt;/a&gt;]&amp;nbsp;&amp;nbsp; [&lt;a href="http://acm.pku.edu.cn/JudgeOnline/problemstatus?problem_id=1096"&gt;Status&lt;/a&gt;]&amp;nbsp;&amp;nbsp; 
[&lt;a href="http://acm.pku.edu.cn/JudgeOnline/bbs?problem_id=1096"&gt;Discuss&lt;/a&gt;]
&lt;/font&gt;&lt;/p&gt;</Description>
                <InputSpec xml:space="preserve" />
                <OutputSpec xml:space="preserve" />
                <Figure filename="1096_1.gif">
                    <Text />
                    <Image xml:space="preserve"></Image>
                </Figure>
            </Problem>
            <TestData>
        <TimeLimit>1</TimeLimit>
        <InputFile />
        <OutputFile />
        <InputFormat inputType="eof">
            <Terminator xml:space="preserve"></Terminator>
            <Seperator xml:space="preserve" layout="bottom"></Seperator>
        </InputFormat>
        <OutputFormat>
            <Header xml:space="preserve"></Header>
            <Footer xml:space="preserve"></Footer>
            <Seperator xml:space="preserve" layout="bottom"></Seperator>
        </OutputFormat>
        <TestCase difficulty="sample">
            <TestInput xml:space="preserve">0
</TestInput>
            <TestOutput xml:space="preserve">0
</TestOutput>
        </TestCase>
    </TestData>
            <Solution xml:space="preserve" language="cpp" filename="" />
        </ProblemArchive>
    </ProblemList>
</PaperSetter>

